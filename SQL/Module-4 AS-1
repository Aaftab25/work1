-- EMPLOYEE_ID FIRST_NAME LAST_NAME SALARY JOINING_DATE DEPARTMENT MANAGER_ID

CREATE TABLE
    employee(
        employee_id INT PRIMARY KEY,
        first_name VARCHAR(20),
        last_name VARCHAR(20),
        salary bigint,
        joining_date DATETIME,
        department VARCHAR(30),
        manager_id INT
    );

-- 1 John Abraham 1000000 01-JAN-13 12.00.00 AM Banking NULL
-- 2 Michael Clarke 800000 01-JAN-13 12.00.00 AM Insurance 1
-- 3 Roy Thomas 700000 01-FEB-13 12.00.00 AM Banking 1
-- 4 Tom Jose 600000 01-FEB-13 12.00.00 AM Insurance 2
-- 5 Jerry Pinto 650000 01-FEB-13 12.00.00 AM Insurance 3
-- 6 Philip Mathew 750000 01-JAN-13 12.00.00 AM Services 3
-- 7 TestName1 123 650000 01-JAN-13 12.00.00 AM Services 2
-- 8 TestName2 Lname% 600000 01-FEB-13 12.00.00 AM Insurance 2

INSERT INTO employee
VALUES 
(1,'John','Abraham',1000000,'2013-01-01 12.00.00','Banking',NULL ) , 
(2,'Michael','Clarke',800000,'2013-01-01 12.00.00','Insurance',1 ) , 
(3,'Roy','Thomas',700000,'2013-02-01 12.00.00','Banking',1 ) , 
(4,'Tom','Jose',600000,'2013-02-01 12.00.00','Insurance',2 ) , 
(5,'Jerry','Pinto',650000,'2013-02-01 12.00.00','Insurance',3 ) , 
(6,'Philip','Mathew',750000,'2013-01-01 12.00.00','Services',3 ) , 
(7,'TestName1','123',650000,'2013-01-01 12.00.00','Services',2 ) , 
(8,'TestName2','Lname%',600000,'2013-02-01 12.00.00','Insurance',2 );

CREATE TABLE
    incentives(
        employee_ref_id INT NOT NULL,
        incentive_date DATE,
        incentive_amount INT,
        CONSTRAINT fk_employee FOREIGN KEY(employee_ref_id) REFERENCES employee(employee_id)
    );

INSERT INTO incentives
VALUES (1, '2013-01-01', 4500) , 
(2, '2013-01-01', 3500) , 
(1, '2013-02-01', 5000) , 
(2, '2013-02-01', 3000) , 
(3, '2013-02-01', 4000);

CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    d_name VARCHAR(20),
    location_id INT,
    CONSTRAINT fk_location FOREIGN KEY(location_id)
    references locations (location_id)
)

-- 1. Create a view Select Banking as 'Bank Dept', Insurance as 'Insurance Dept' and Services as 'Services Dept' from employee table

--------Bank Department---------------

CREATE VIEW BANK_DEPT AS 
	SELECT * FROM employee WHERE department = 
'BANKING'; 

--------Insurance Department---------------

CREATE VIEW INSURANCE_DEPT AS 
	SELECT * FROM employee WHERE department = 
'INSURANCE'; 

--------Services Department---------------

CREATE VIEW SERVICES_DEPT AS 
	SELECT * FROM employee WHERE department = 
'SERVICES'; 

-- Create a new view called 'ViewName' in schema 'SchemaName'

-- Drop the view if it already exists

-- 2. Select employee details from employee table if data exists in incentive table ?

SELECT *
FROM employee e
    INNER JOIN incentive i ON e.employee_id = i.employee_ref_id -- 3. Find Salary of the employee whose salary is more than Roy Salary 
SELECT first_name, salary
FROM employee
WHERE salary > (
        SELECT salary
        from employee
        where
            first_name = 'Roy'
    );

-- 4. Create a view to select FirstName,LastName,Salary,JoiningDate,IncentiveDate and IncentiveAmount

CREATE VIEW E_SALARY_INCENTIVE AS 
	SELECT
	    e.first_name,
	    e.last_name,
	    e.salary,
	    e.joining_date,
	    i.incentive_date,
	    i.incentive_amount
	FROM employee e
	    INNER JOIN incentive i ON e.employee_id = i.e
EMPLOYEE_REF_ID; 

-- 5. Create a view to select Select first_name, incentive amount from employee and incentives table for those employees who have incentives and incentive amount greater than 3000

CREATE VIEW E_SALARY_INCENTIVE_COM AS 
	SELECT
	    e.first_name,
	    e.last_name,
	    e.salary,
	    e.joining_date,
	    i.incentive_date,
	    i.incentive_amount
	FROM employee e
	    INNER JOIN incentives i ON e.employee_id = i.employee_ref_id
	WHERE incentive_amount >
3000; 

SELECT * FROM e_salary_incentive_com;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE
    employees(
        employee_id INT PRIMARY KEY,
        first_name VARCHAR(20),
        last_name VARCHAR(20),
        salary bigint,
        joining_date DATETIME,
        department_id INT,
        manager_id INT
    );

INSERT INTO employees
VALUES 
( 1, 'John', 'Abraham', 1000000, '2013-01-01 12.00.00', 1001, NULL ), 
( 2, 'Michael', 'Clarke', 800000, '2013-01-01 12.00.00', 002, 1 ) , 
( 3, 'Roy', 'Thomas', 700000, '2013-02-01 12.00.00', 1001, 1 ) , 
( 4, 'Tom', 'Jose', 600000, '2013-02-01 12.00.00', 1002, 2 ) , 
( 5, 'Jerry', 'Pinto', 650000, '2013-02-01 12.00.00', 2, 3 ) , 
( 6, 'Philip', 'Mathew', 750000, '2013-01-01 12.00.00', 1003, 3 ) , 
( 7, 'TestName1', '123', 650000, '2013-01-01 12.00.00', 1003, 2 ) , 
( 8, 'TestName2', 'Lname%', 600000, '2013-02-01 12.00.00', 1002, 2 );

SELECT * FROM employees;

CREATE TABLE
    department (
        department_id int PRIMARY KEY,
        dept_name VARCHAR(25),
        location_id INT,
        constraint fk_location FOREIGN KEY (location_id) REFERENCES locations(location_id)
    );

INSERT into department
VALUES (1001, 'Banking', 10001) , 
(1002, 'Insurance', 10003) , 
(1003, 'Services', 10004);

SELECT * FROM department;

CREATE TABLE
    locations(
        location_id INT PRIMARY KEY,
        location VARCHAR(20)
    );

INSERT INTO locations
VALUES (10001, 'Vadodara') , 
(10002, 'Mumbai') , 
(10003, 'London') , 
(10004, 'Paris') , 
(10005, 'China');

SELECT * from locations;

ALTER TABLE locations DROP COLUMN country ;

DESCRIBE locations;

alter table employees
add
    constraint fk_jobs FOREIGN KEY (job_id) REFERENCES jobs (job_id);

select * from employees;

CREATE TABLE jobs(
    job_id INT PRIMARY KEY,
    job_title VARCHAR (20)
)

insert into jobs values
(101, 'Software Developer'),
(102, 'Php Developer'),
(103, 'Java Developer'),
(104, 'Full-Stack Developer');

SELECT * FROM jobs

DESCRIBE employees;



-- 6. Create a View to Find the names (first_name, last_name), job, department number, and department name of the employees who work in London Create a view to get the department name and number of employees in the department.

CREATE VIEW E_JOB_DEPART AS 
	SELECT
	    e.first_name,
	    e.last_name,
	    j.job_title,
	    d.department_id,
	    d.dept_name
	FROM employees e
	    INNER JOIN jobs j ON e.job_id = j.job_id
	    INNER JOIN department d ON e.department_id = d.department_id
	    INNER JOIN locations l ON d.department_id = l.department_id
	WHERE location ='LONDON'; 

SELECT * FROM E_JOB_DEPART;

SELECT * FROM locations;

DESCRIBE locations;

ALTER TABLE locations ADD constraint fk_dept FOREIGN KEY(department_id) REFERENCES department(department_id);



-- 7. Create a View to get the department name and number of employees in the department.

CREATE VIEW EM_DEP AS 
	SELECT
	    dept_name,
	    employee_id
	FROM employees e
	    INNER JOIN department d ON e.department_id = d.DEPARTMENT_ID; 

SELECT * FROM em_dep;
-------------------------------------------------------------------------------------------------
ALTER TABLE employees 
ADD COLUMN end_date DATE;

SELECT * FROM employees;
-- 8. Find the employee ID, job title, number of days between ending date and starting date for all jobs in department 90 from job history.
    SELECT employee_id,job_title,COALESCE(DATEDIFF(end_date,date(joining_date)),'Working...') as Number_Of_Days FROM employees e
    INNER JOIN jobs j ON e.job_id = j.job_id;

-- 9. Write a query to display the department name, manager name, and city.
    SELECT DISTINCT e.employee_id,d.department_id, d.dept_name, mg.first_name as Manager_Name,l.location as City FROM employees e 
    INNER JOIN employees mg ON e.manager_id = mg.employee_id
    INNER JOIN department d ON e.department_id = d.department_id
    INNER JOIN locations l ON d.department_id =  l.department_id;
   

-- 10. Create a View to display department name, name (first_name, last_name), hire date, salary of the manager for all managers whose experience is more than 15 years.

    CREATE VIEW exp_manger
    AS 
        SELECT d.dept_name, CONCAT(m.first_name," ",m.last_name) as Name,
          m.joining_date,m.salary
            FROM employees e 
                INNER JOIN employees m
                    ON e.manager_id = m.employee_id
                INNER JOIN department d 
                    ON e.department_id = d.department_id
                WHERE YEAR(CURDATE())-YEAR(m.joining_date)  > 15 ;
                
    DROP VIEW exp_manger;

    SELECT * FROM exp_manger;

